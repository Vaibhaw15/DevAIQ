[
  {
    "questionText": "Which company developed Kotlin?",
    "correctAnswer": "JetBrains",
    "explanation": "Kotlin was developed by JetBrains and first appeared in 2011.",
    "options": [
      "Google",
      "JetBrains",
      "Oracle",
      "Microsoft"
    ]
  },
  {
    "questionText": "What is the file extension for Kotlin files?",
    "correctAnswer": ".kt",
    "explanation": "Kotlin files use the .kt extension.",
    "options": [
      ".java",
      ".kt",
      ".kotlin",
      ".kts"
    ]
  },
  {
    "questionText": "Which keyword is used to declare a variable in Kotlin?",
    "correctAnswer": "var",
    "explanation": "The 'var' keyword is used to declare mutable variables in Kotlin.",
    "options": [
      "let",
      "var",
      "const",
      "def"
    ]
  },
  {
    "questionText": "Which keyword is used to declare a constant in Kotlin?",
    "correctAnswer": "val",
    "explanation": "The 'val' keyword is used to declare immutable variables (constants) in Kotlin.",
    "options": [
      "const",
      "val",
      "final",
      "static"
    ]
  },
  {
    "questionText": "What is the entry point of a Kotlin program?",
    "correctAnswer": "main function",
    "explanation": "The main() function serves as the entry point for Kotlin programs.",
    "options": [
      "start function",
      "main function",
      "init function",
      "begin function"
    ]
  },
  {
    "questionText": "Which symbol is used for string interpolation in Kotlin?",
    "correctAnswer": "$",
    "explanation": "The dollar sign ($) is used for string interpolation in Kotlin.",
    "options": [
      "%",
      "$",
      "#",
      "@"
    ]
  },
  {
    "questionText": "What is the correct way to declare a nullable variable in Kotlin?",
    "correctAnswer": "var name: String?",
    "explanation": "Adding a question mark (?) after the type makes a variable nullable.",
    "options": [
      "var name: String",
      "var name: String?",
      "var name: String!",
      "var name: nullable String"
    ]
  },
  {
    "questionText": "Which operator is used for safe calls in Kotlin?",
    "correctAnswer": "?.",
    "explanation": "The safe call operator (?.) allows calling methods on nullable objects safely.",
    "options": [
      "!!",
      "?.",
      "?:",
      "!!"
    ]
  },
  {
    "questionText": "What does the Elvis operator (?:) do in Kotlin?",
    "correctAnswer": "Provides a default value for null",
    "explanation": "The Elvis operator (?:) returns the right-hand side value if the left side is null.",
    "options": [
      "Throws an exception",
      "Provides a default value for null",
      "Forces unwrapping",
      "Checks for null"
    ]
  },
  {
    "questionText": "Which keyword is used to define a function in Kotlin?",
    "correctAnswer": "fun",
    "explanation": "The 'fun' keyword is used to declare functions in Kotlin.",
    "options": [
      "function",
      "fun",
      "def",
      "method"
    ]
  },
  {
    "questionText": "What is the default visibility modifier in Kotlin?",
    "correctAnswer": "public",
    "explanation": "By default, all declarations in Kotlin are public.",
    "options": [
      "private",
      "public",
      "protected",
      "internal"
    ]
  },
  {
    "questionText": "Which keyword is used to create a class in Kotlin?",
    "correctAnswer": "class",
    "explanation": "The 'class' keyword is used to define classes in Kotlin.",
    "options": [
      "class",
      "object",
      "struct",
      "type"
    ]
  },
  {
    "questionText": "What is the correct syntax for a single-line comment in Kotlin?",
    "correctAnswer": "//",
    "explanation": "Single-line comments in Kotlin start with double forward slashes (//).",
    "options": [
      "#",
      "//",
      "/*",
      "--"
    ]
  },
  {
    "questionText": "Which of the following is NOT a primitive type in Kotlin?",
    "correctAnswer": "String",
    "explanation": "String is not a primitive type in Kotlin; it's a class.",
    "options": [
      "Int",
      "Boolean",
      "String",
      "Double"
    ]
  },
  {
    "questionText": "What is the range operator in Kotlin?",
    "correctAnswer": "..",
    "explanation": "The range operator (..) creates a range of values in Kotlin.",
    "options": [
      "->",
      "..",
      ":",
      "=>"
    ]
  },
  {
    "questionText": "Which keyword is used for inheritance in Kotlin?",
    "correctAnswer": ":",
    "explanation": "The colon (:) is used to indicate inheritance in Kotlin.",
    "options": [
      "extends",
      ":",
      "implements",
      "inherits"
    ]
  },
  {
    "questionText": "What is the purpose of the 'open' keyword in Kotlin?",
    "correctAnswer": "Makes a class inheritable",
    "explanation": "The 'open' keyword allows a class to be inherited by other classes.",
    "options": [
      "Makes a class abstract",
      "Makes a class inheritable",
      "Opens a file",
      "Makes a variable mutable"
    ]
  },
  {
    "questionText": "Which keyword is used to override a function in Kotlin?",
    "correctAnswer": "override",
    "explanation": "The 'override' keyword is used to override parent class methods.",
    "options": [
      "override",
      "overload",
      "super",
      "virtual"
    ]
  },
  {
    "questionText": "What is the correct way to create an array in Kotlin?",
    "correctAnswer": "arrayOf()",
    "explanation": "The arrayOf() function is used to create arrays in Kotlin.",
    "options": [
      "Array()",
      "arrayOf()",
      "new Array()",
      "createArray()"
    ]
  },
  {
    "questionText": "Which collection type is mutable in Kotlin?",
    "correctAnswer": "MutableList",
    "explanation": "MutableList allows modification of elements after creation.",
    "options": [
      "List",
      "MutableList",
      "Array",
      "Set"
    ]
  },
  {
    "questionText": "What is the purpose of the 'lateinit' keyword?",
    "correctAnswer": "Delays initialization of non-null properties",
    "explanation": "'lateinit' allows you to declare non-null properties that will be initialized later.",
    "options": [
      "Creates a lazy property",
      "Delays initialization of non-null properties",
      "Makes a property nullable",
      "Initializes with default value"
    ]
  },
  {
    "questionText": "Which keyword is used to create a singleton in Kotlin?",
    "correctAnswer": "object",
    "explanation": "The 'object' keyword creates a singleton instance in Kotlin.",
    "options": [
      "singleton",
      "object",
      "instance",
      "static"
    ]
  },
  {
    "questionText": "What is the purpose of the 'companion object' in Kotlin?",
    "correctAnswer": "Creates class-level functions and properties",
    "explanation": "Companion objects allow you to define class-level members similar to static in Java.",
    "options": [
      "Creates a singleton",
      "Creates class-level functions and properties",
      "Creates an inner class",
      "Creates a nested class"
    ]
  },
  {
    "questionText": "Which loop is NOT available in Kotlin?",
    "correctAnswer": "do-until",
    "explanation": "Kotlin has for, while, and do-while loops, but not do-until.",
    "options": [
      "for",
      "while",
      "do-while",
      "do-until"
    ]
  },
  {
    "questionText": "What is the correct syntax for a when expression in Kotlin?",
    "correctAnswer": "when (x) { ... }",
    "explanation": "The when expression uses the syntax 'when (variable) { conditions }'.",
    "options": [
      "switch (x) { ... }",
      "when (x) { ... }",
      "case (x) { ... }",
      "match (x) { ... }"
    ]
  },
  {
    "questionText": "Which keyword is used to handle exceptions in Kotlin?",
    "correctAnswer": "try",
    "explanation": "The 'try' keyword begins exception handling blocks in Kotlin.",
    "options": [
      "catch",
      "try",
      "throw",
      "exception"
    ]
  },
  {
    "questionText": "What is the purpose of the '!!' operator in Kotlin?",
    "correctAnswer": "Forces unwrapping of nullable values",
    "explanation": "The not-null assertion operator (!!) converts nullable values to non-null, throwing an exception if null.",
    "options": [
      "Logical NOT",
      "Forces unwrapping of nullable values",
      "Comparison operator",
      "Assignment operator"
    ]
  },
  {
    "questionText": "Which keyword is used to define an interface in Kotlin?",
    "correctAnswer": "interface",
    "explanation": "The 'interface' keyword is used to define interfaces in Kotlin.",
    "options": [
      "interface",
      "protocol",
      "contract",
      "abstract"
    ]
  },
  {
    "questionText": "What is the correct way to define a lambda expression in Kotlin?",
    "correctAnswer": "{ x -> x * 2 }",
    "explanation": "Lambda expressions in Kotlin are defined using curly braces with parameter -> body syntax.",
    "options": [
      "(x) => x * 2",
      "{ x -> x * 2 }",
      "lambda x: x * 2",
      "x => x * 2"
    ]
  },
  {
    "questionText": "Which function is used to filter collections in Kotlin?",
    "correctAnswer": "filter",
    "explanation": "The filter() function is used to filter collections based on a predicate.",
    "options": [
      "select",
      "filter",
      "where",
      "find"
    ]
  },
  {
    "questionText": "What does the 'map' function do in Kotlin collections?",
    "correctAnswer": "Transforms each element",
    "explanation": "The map() function transforms each element of a collection using a given function.",
    "options": [
      "Filters elements",
      "Transforms each element",
      "Sorts elements",
      "Groups elements"
    ]
  },
  {
    "questionText": "Which keyword is used to mark a function as suspend in Kotlin?",
    "correctAnswer": "suspend",
    "explanation": "The 'suspend' keyword marks functions that can be paused and resumed for coroutines.",
    "options": [
      "async",
      "suspend",
      "await",
      "coroutine"
    ]
  },
  {
    "questionText": "What is the purpose of the 'sealed' keyword in Kotlin?",
    "correctAnswer": "Restricts class hierarchy",
    "explanation": "Sealed classes restrict the inheritance hierarchy to a known set of subclasses.",
    "options": [
      "Makes class final",
      "Restricts class hierarchy",
      "Hides class implementation",
      "Makes class immutable"
    ]
  },
  {
    "questionText": "Which operator is used for type checking in Kotlin?",
    "correctAnswer": "is",
    "explanation": "The 'is' operator is used for type checking in Kotlin.",
    "options": [
      "instanceof",
      "is",
      "typeof",
      "as"
    ]
  },
  {
    "questionText": "What is the purpose of the 'as' operator in Kotlin?",
    "correctAnswer": "Type casting",
    "explanation": "The 'as' operator is used for explicit type casting in Kotlin.",
    "options": [
      "Type checking",
      "Type casting",
      "Assignment",
      "Comparison"
    ]
  },
  {
    "questionText": "Which keyword is used to create an enum in Kotlin?",
    "correctAnswer": "enum",
    "explanation": "The 'enum' keyword is used to define enumeration classes in Kotlin.",
    "options": [
      "enum",
      "enumeration",
      "const",
      "final"
    ]
  },
  {
    "questionText": "What is the correct way to create a list in Kotlin?",
    "correctAnswer": "listOf()",
    "explanation": "The listOf() function creates an immutable list in Kotlin.",
    "options": [
      "List()",
      "listOf()",
      "new List()",
      "createList()"
    ]
  },
  {
    "questionText": "Which keyword is used to make a property lazy in Kotlin?",
    "correctAnswer": "lazy",
    "explanation": "The 'lazy' delegate is used to create properties that are initialized on first access.",
    "options": [
      "lazy",
      "defer",
      "late",
      "delayed"
    ]
  },
  {
    "questionText": "What is the purpose of the 'inner' keyword in Kotlin?",
    "correctAnswer": "Creates nested class with access to outer class",
    "explanation": "The 'inner' keyword creates nested classes that can access outer class members.",
    "options": [
      "Creates private class",
      "Creates nested class with access to outer class",
      "Creates abstract class",
      "Creates final class"
    ]
  },
  {
    "questionText": "Which function is used to convert a string to an integer in Kotlin?",
    "correctAnswer": "toInt()",
    "explanation": "The toInt() function converts a string to an integer in Kotlin.",
    "options": [
      "parseInt()",
      "toInt()",
      "asInt()",
      "convertToInt()"
    ]
  },
  {
    "questionText": "What is the default parameter passing mechanism in Kotlin?",
    "correctAnswer": "Pass by value",
    "explanation": "Kotlin uses pass by value for primitive types and pass by reference for objects.",
    "options": [
      "Pass by reference",
      "Pass by value",
      "Pass by name",
      "Pass by copy"
    ]
  },
  {
    "questionText": "Which keyword is used to define a data class in Kotlin?",
    "correctAnswer": "data",
    "explanation": "The 'data' keyword creates classes that automatically generate equals, hashCode, toString, and copy methods.",
    "options": [
      "data",
      "struct",
      "record",
      "model"
    ]
  },
  {
    "questionText": "What is the purpose of the 'inline' keyword in Kotlin?",
    "correctAnswer": "Optimizes function calls by inlining code",
    "explanation": "The 'inline' keyword tells the compiler to insert the function code directly at call sites.",
    "options": [
      "Makes function private",
      "Optimizes function calls by inlining code",
      "Makes function abstract",
      "Creates function template"
    ]
  },
  {
    "questionText": "Which collection function returns the first element in Kotlin?",
    "correctAnswer": "first()",
    "explanation": "The first() function returns the first element of a collection.",
    "options": [
      "head()",
      "first()",
      "top()",
      "begin()"
    ]
  },
  {
    "questionText": "What is the correct way to handle null values safely in Kotlin?",
    "correctAnswer": "Use safe call operator (?.)",
    "explanation": "The safe call operator (?.) is the recommended way to handle null values safely.",
    "options": [
      "Use try-catch",
      "Use safe call operator (?.)",
      "Use if-else",
      "Use !! operator"
    ]
  },
  {
    "questionText": "Which keyword is used to import packages in Kotlin?",
    "correctAnswer": "import",
    "explanation": "The 'import' keyword is used to import packages and classes in Kotlin.",
    "options": [
      "include",
      "import",
      "using",
      "require"
    ]
  },
  {
    "questionText": "What is the purpose of the 'vararg' keyword in Kotlin?",
    "correctAnswer": "Allows variable number of arguments",
    "explanation": "The 'vararg' keyword allows a function to accept a variable number of arguments.",
    "options": [
      "Creates variable arguments",
      "Allows variable number of arguments",
      "Makes variable optional",
      "Creates array parameter"
    ]
  },
  {
    "questionText": "Which operator is used for concatenating strings in Kotlin?",
    "correctAnswer": "+",
    "explanation": "The plus operator (+) is used for string concatenation in Kotlin.",
    "options": [
      "&",
      "+",
      "++",
      "concat"
    ]
  },
  {
    "questionText": "What is the correct way to create a mutable map in Kotlin?",
    "correctAnswer": "mutableMapOf()",
    "explanation": "The mutableMapOf() function creates a mutable map in Kotlin.",
    "options": [
      "mapOf()",
      "mutableMapOf()",
      "hashMapOf()",
      "createMap()"
    ]
  },
  {
    "questionText": "Which keyword is used to define abstract classes in Kotlin?",
    "correctAnswer": "abstract",
    "explanation": "The 'abstract' keyword is used to define abstract classes in Kotlin.",
    "options": [
      "abstract",
      "virtual",
      "interface",
      "open"
    ]
  },
  {
    "questionText": "What is the purpose of the 'this' keyword in Kotlin?",
    "correctAnswer": "Refers to current instance",
    "explanation": "The 'this' keyword refers to the current instance of a class.",
    "options": [
      "Refers to parent class",
      "Refers to current instance",
      "Refers to static context",
      "Refers to companion object"
    ]
  },
  {
    "questionText": "Which function is used to check if a collection is empty in Kotlin?",
    "correctAnswer": "isEmpty()",
    "explanation": "The isEmpty() function checks if a collection contains no elements.",
    "options": [
      "empty()",
      "isEmpty()",
      "isNull()",
      "hasElements()"
    ]
  },
  {
    "questionText": "What is the correct syntax for string templates in Kotlin?",
    "correctAnswer": "\"Hello $name\"",
    "explanation": "String templates use the dollar sign ($) followed by the variable name.",
    "options": [
      "\"Hello {name}\"",
      "\"Hello $name\"",
      "\"Hello %s\"",
      "\"Hello \" + name"
    ]
  },
  {
    "questionText": "Which keyword is used to define extension functions in Kotlin?",
    "correctAnswer": "fun",
    "explanation": "Extension functions are defined using the 'fun' keyword with receiver type syntax.",
    "options": [
      "extension",
      "fun",
      "extend",
      "method"
    ]
  },
  {
    "questionText": "What is the purpose of the 'apply' function in Kotlin?",
    "correctAnswer": "Configures an object and returns it",
    "explanation": "The apply function allows you to configure an object's properties and returns the object itself.",
    "options": [
      "Transforms an object",
      "Configures an object and returns it",
      "Filters an object",
      "Creates a copy of object"
    ]
  },
  {
    "questionText": "Which operator is used for equality comparison in Kotlin?",
    "correctAnswer": "==",
    "explanation": "The double equals (==) operator is used for structural equality comparison in Kotlin.",
    "options": [
      "=",
      "==",
      "===",
      "equals"
    ]
  },
  {
    "questionText": "What is the purpose of the 'let' function in Kotlin?",
    "correctAnswer": "Executes code block with object as parameter",
    "explanation": "The let function executes a code block with the object as a parameter and returns the result.",
    "options": [
      "Creates a variable",
      "Executes code block with object as parameter",
      "Assigns a value",
      "Declares a constant"
    ]
  },
  {
    "questionText": "Which keyword is used to define a constructor in Kotlin?",
    "correctAnswer": "constructor",
    "explanation": "The 'constructor' keyword is used to define secondary constructors in Kotlin.",
    "options": [
      "init",
      "constructor",
      "create",
      "build"
    ]
  },
  {
    "questionText": "What is the purpose of the 'init' block in Kotlin?",
    "correctAnswer": "Initializes class properties",
    "explanation": "The init block contains initialization code that runs when an object is created.",
    "options": [
      "Defines constructor",
      "Initializes class properties",
      "Creates static block",
      "Defines destructor"
    ]
  },
  {
    "questionText": "Which function is used to sort a list in Kotlin?",
    "correctAnswer": "sorted()",
    "explanation": "The sorted() function returns a new sorted list without modifying the original.",
    "options": [
      "sort()",
      "sorted()",
      "orderBy()",
      "arrange()"
    ]
  },
  {
    "questionText": "What is the correct way to define default parameter values in Kotlin?",
    "correctAnswer": "fun greet(name: String = \"World\")",
    "explanation": "Default parameter values are defined using the assignment operator (=) in the parameter list.",
    "options": [
      "fun greet(name: String := \"World\")",
      "fun greet(name: String = \"World\")",
      "fun greet(name: String -> \"World\")",
      "fun greet(name: String default \"World\")"
    ]
  },
  {
    "questionText": "Which keyword is used to define a generic class in Kotlin?",
    "correctAnswer": "No specific keyword, use angle brackets",
    "explanation": "Generic classes are defined using angle brackets <T> without a specific keyword.",
    "options": [
      "generic",
      "template",
      "No specific keyword, use angle brackets",
      "type"
    ]
  },
  {
    "questionText": "What is the purpose of the 'also' function in Kotlin?",
    "correctAnswer": "Performs actions on object and returns it",
    "explanation": "The also function performs additional actions on an object and returns the object itself.",
    "options": [
      "Transforms an object",
      "Performs actions on object and returns it",
      "Creates a copy",
      "Filters an object"
    ]
  },
  {
    "questionText": "Which operator is used for reference equality in Kotlin?",
    "correctAnswer": "===",
    "explanation": "The triple equals (===) operator checks if two references point to the same object.",
    "options": [
      "==",
      "===",
      "equals",
      "is"
    ]
  },
  {
    "questionText": "What is the correct way to create a set in Kotlin?",
    "correctAnswer": "setOf()",
    "explanation": "The setOf() function creates an immutable set in Kotlin.",
    "options": [
      "Set()",
      "setOf()",
      "createSet()",
      "hashSetOf()"
    ]
  },
  {
    "questionText": "Which keyword is used to define local functions in Kotlin?",
    "correctAnswer": "fun",
    "explanation": "Local functions are defined using the 'fun' keyword inside other functions.",
    "options": [
      "local",
      "fun",
      "inner",
      "nested"
    ]
  },
  {
    "questionText": "What is the purpose of the 'run' function in Kotlin?",
    "correctAnswer": "Executes code block and returns result",
    "explanation": "The run function executes a code block and returns the result of the block.",
    "options": [
      "Runs a program",
      "Executes code block and returns result",
      "Creates a thread",
      "Starts a process"
    ]
  },
  {
    "questionText": "Which function is used to find the maximum element in a collection?",
    "correctAnswer": "maxOrNull()",
    "explanation": "The maxOrNull() function finds the maximum element or returns null if the collection is empty.",
    "options": [
      "max()",
      "maxOrNull()",
      "maximum()",
      "largest()"
    ]
  },
  {
    "questionText": "What is the correct way to define a property with custom getter in Kotlin?",
    "correctAnswer": "val property: Type get() = value",
    "explanation": "Custom getters are defined using the 'get()' syntax after the property declaration.",
    "options": [
      "val property: Type { get = value }",
      "val property: Type get() = value",
      "val property: Type getter = value",
      "val property: Type => value"
    ]
  },
  {
    "questionText": "Which keyword is used to define type aliases in Kotlin?",
    "correctAnswer": "typealias",
    "explanation": "The 'typealias' keyword creates alternative names for existing types.",
    "options": [
      "alias",
      "typealias",
      "typedef",
      "type"
    ]
  },
  {
    "questionText": "What is the purpose of the 'with' function in Kotlin?",
    "correctAnswer": "Calls multiple methods on an object",
    "explanation": "The with function allows calling multiple methods on an object without repeating the object name.",
    "options": [
      "Creates an object",
      "Calls multiple methods on an object",
      "Destroys an object",
      "Copies an object"
    ]
  },
  {
    "questionText": "Which operator is used for destructuring declarations in Kotlin?",
    "correctAnswer": "Parentheses ()",
    "explanation": "Destructuring declarations use parentheses to extract multiple values from objects.",
    "options": [
      "Brackets []",
      "Parentheses ()",
      "Braces {}",
      "Angle brackets <>"
    ]
  },
  {
    "questionText": "What is the correct way to handle multiple catch blocks in Kotlin?",
    "correctAnswer": "Multiple catch blocks after try",
    "explanation": "Kotlin supports multiple catch blocks after a try block, similar to Java.",
    "options": [
      "Single catch with multiple types",
      "Multiple catch blocks after try",
      "Nested try-catch",
      "Switch statement in catch"
    ]
  },
  {
    "questionText": "Which function is used to convert a collection to an array in Kotlin?",
    "correctAnswer": "toTypedArray()",
    "explanation": "The toTypedArray() function converts a collection to an array of the appropriate type.",
    "options": [
      "toArray()",
      "toTypedArray()",
      "asArray()",
      "convertToArray()"
    ]
  },
  {
    "questionText": "What is the purpose of the 'reified' keyword in Kotlin?",
    "correctAnswer": "Preserves type information in inline functions",
    "explanation": "The 'reified' keyword allows access to type information at runtime in inline functions.",
    "options": [
      "Makes type concrete",
      "Preserves type information in inline functions",
      "Creates type alias",
      "Defines generic constraint"
    ]
  },
  {
    "questionText": "Which keyword is used to define delegated properties in Kotlin?",
    "correctAnswer": "by",
    "explanation": "The 'by' keyword is used to delegate property access to another object.",
    "options": [
      "delegate",
      "by",
      "to",
      "via"
    ]
  },
  {
    "questionText": "What is the correct way to create a pair in Kotlin?",
    "correctAnswer": "Pair(first, second)",
    "explanation": "The Pair constructor or 'to' infix function can create pairs in Kotlin.",
    "options": [
      "Pair(first, second)",
      "pair(first, second)",
      "makePair(first, second)",
      "createPair(first, second)"
    ]
  },
  {
    "questionText": "Which function is used to group collection elements in Kotlin?",
    "correctAnswer": "groupBy()",
    "explanation": "The groupBy() function groups collection elements by a key selector function.",
    "options": [
      "group()",
      "groupBy()",
      "partition()",
      "classify()"
    ]
  },
  {
    "questionText": "What is the purpose of the 'crossinline' keyword in Kotlin?",
    "correctAnswer": "Prevents non-local returns in lambdas",
    "explanation": "The 'crossinline' keyword prevents lambda parameters from allowing non-local returns.",
    "options": [
      "Enables cross-platform code",
      "Prevents non-local returns in lambdas",
      "Creates inline lambda",
      "Enables lambda chaining"
    ]
  },
  {
    "questionText": "Which operator is used to create ranges with exclusion in Kotlin?",
    "correctAnswer": "until",
    "explanation": "The 'until' infix function creates ranges that exclude the end value.",
    "options": [
      "to",
      "until",
      "downTo",
      "step"
    ]
  },
  {
    "questionText": "What is the correct way to define an annotation in Kotlin?",
    "correctAnswer": "annotation class MyAnnotation",
    "explanation": "Annotations are defined using the 'annotation class' keywords.",
    "options": [
      "@annotation MyAnnotation",
      "annotation class MyAnnotation",
      "class @MyAnnotation",
      "annotate class MyAnnotation"
    ]
  },
  {
    "questionText": "Which function is used to reduce a collection to a single value in Kotlin?",
    "correctAnswer": "reduce()",
    "explanation": "The reduce() function applies a binary operation to collection elements to produce a single result.",
    "options": [
      "fold()",
      "reduce()",
      "aggregate()",
      "accumulate()"
    ]
  },
  {
    "questionText": "What is the difference between 'fold' and 'reduce' functions in Kotlin?",
    "correctAnswer": "fold takes an initial value, reduce doesn't",
    "explanation": "The fold function takes an initial value while reduce starts with the first element of the collection.",
    "options": [
      "No difference",
      "fold takes an initial value, reduce doesn't",
      "fold is for lists, reduce for arrays",
      "fold is faster than reduce"
    ]
  },
  {
    "questionText": "Which keyword is used to define a function that can be called without creating an instance?",
    "correctAnswer": "Functions in companion object",
    "explanation": "Functions in companion objects can be called without creating class instances.",
    "options": [
      "static",
      "Functions in companion object",
      "global",
      "standalone"
    ]
  },
  {
    "questionText": "What is the purpose of the 'noinline' keyword in Kotlin?",
    "correctAnswer": "Prevents inlining of specific lambda parameters",
    "explanation": "The 'noinline' keyword prevents specific lambda parameters from being inlined.",
    "options": [
      "Prevents function inlining",
      "Prevents inlining of specific lambda parameters",
      "Disables optimization",
      "Creates non-inline function"
    ]
  },
  {
    "questionText": "Which function is used to check if all elements satisfy a condition in Kotlin?",
    "correctAnswer": "all()",
    "explanation": "The all() function returns true if all elements satisfy the given predicate.",
    "options": [
      "every()",
      "all()",
      "check()",
      "verify()"
    ]
  },
  {
    "questionText": "What is the correct way to define a constant at the top level in Kotlin?",
    "correctAnswer": "const val CONSTANT = value",
    "explanation": "Top-level constants are defined using 'const val' for compile-time constants.",
    "options": [
      "val CONSTANT = value",
      "const val CONSTANT = value",
      "final val CONSTANT = value",
      "static val CONSTANT = value"
    ]
  },
  {
    "questionText": "Which function is used to check if any element satisfies a condition in Kotlin?",
    "correctAnswer": "any()",
    "explanation": "The any() function returns true if at least one element satisfies the given predicate.",
    "options": [
      "some()",
      "any()",
      "exists()",
      "contains()"
    ]
  },
  {
    "questionText": "What is the purpose of the 'tailrec' keyword in Kotlin?",
    "correctAnswer": "Optimizes tail-recursive functions",
    "explanation": "The 'tailrec' keyword enables tail call optimization for recursive functions.",
    "options": [
      "Creates recursive function",
      "Optimizes tail-recursive functions",
      "Prevents infinite recursion",
      "Defines recursive data structure"
    ]
  },
  {
    "questionText": "Which operator is used for safe casting in Kotlin?",
    "correctAnswer": "as?",
    "explanation": "The safe cast operator (as?) returns null if casting fails instead of throwing an exception.",
    "options": [
      "as",
      "as?",
      "cast",
      "safeCast"
    ]
  },
  {
    "questionText": "What is the correct way to create a triple in Kotlin?",
    "correctAnswer": "Triple(first, second, third)",
    "explanation": "The Triple constructor creates a data structure holding three values.",
    "options": [
      "Triple(first, second, third)",
      "triple(first, second, third)",
      "Tuple3(first, second, third)",
      "makeTriple(first, second, third)"
    ]
  },
  {
    "questionText": "Which function is used to take only the first n elements from a collection?",
    "correctAnswer": "take()",
    "explanation": "The take() function returns a list containing the first n elements.",
    "options": [
      "first()",
      "take()",
      "limit()",
      "head()"
    ]
  },
  {
    "questionText": "What is the purpose of the 'expect' keyword in Kotlin multiplatform?",
    "correctAnswer": "Declares platform-specific implementations",
    "explanation": "The 'expect' keyword declares functions that will have platform-specific implementations.",
    "options": [
      "Defines expected behavior",
      "Declares platform-specific implementations",
      "Creates test expectations",
      "Validates input parameters"
    ]
  },
  {
    "questionText": "Which function is used to drop the first n elements from a collection?",
    "correctAnswer": "drop()",
    "explanation": "The drop() function returns a list containing all elements except the first n elements.",
    "options": [
      "skip()",
      "drop()",
      "remove()",
      "exclude()"
    ]
  },
  {
    "questionText": "What is the correct syntax for named arguments in Kotlin function calls?",
    "correctAnswer": "functionName(paramName = value)",
    "explanation": "Named arguments use the parameter name followed by equals sign and the value.",
    "options": [
      "functionName(paramName: value)",
      "functionName(paramName = value)",
      "functionName(paramName -> value)",
      "functionName(paramName := value)"
    ]
  },
  {
    "questionText": "Which keyword is used to define an annotation parameter as repeatable?",
    "correctAnswer": "@Repeatable",
    "explanation": "The @Repeatable annotation allows an annotation to be applied multiple times.",
    "options": [
      "@Multiple",
      "@Repeatable",
      "@Array",
      "@List"
    ]
  },
  {
    "questionText": "What is the purpose of the 'actual' keyword in Kotlin multiplatform?",
    "correctAnswer": "Provides platform-specific implementation",
    "explanation": "The 'actual' keyword provides the platform-specific implementation for 'expect' declarations.",
    "options": [
      "Defines actual behavior",
      "Provides platform-specific implementation",
      "Creates concrete implementation",
      "Validates implementation"
    ]
  },
  {
    "questionText": "Which function is used to find the index of an element in a collection?",
    "correctAnswer": "indexOf()",
    "explanation": "The indexOf() function returns the index of the first occurrence of an element.",
    "options": [
      "findIndex()",
      "indexOf()",
      "position()",
      "locate()"
    ]
  },
  {
    "questionText": "What is the effect of using 'operator' with extension functions?",
    "correctAnswer": "Allows overloading operators for types you don't control",
    "explanation": "Operator extension functions enable adding operator support to existing types.",
    "options": [
      "Compilation error - operators cannot be extensions",
      "Allows overloading operators for types you don't control",
      "Only works with built-in operators",
      "Requires modification of original class"
    ]
  },
  {
    "questionText": "What happens when you access 'this' in a lambda with receiver inside an inner class?",
    "correctAnswer": "this refers to lambda receiver, outer class needs qualified this",
    "explanation": "Lambda receivers take precedence over outer class instances for 'this' resolution.",
    "options": [
      "this refers to inner class instance",
      "this refers to outer class instance",
      "this refers to lambda receiver, outer class needs qualified this",
      "Compilation error due to ambiguity"
    ]
  }
]